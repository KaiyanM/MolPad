nao_ptw[nao_ptw$cluster %in% coords_filt()[,1] ,] }
else{
nao_ptw[nao_ptw$cluster %in% coords_filt()[,1] ,] %>% filter(taxonomic.scope == input$s_tax)
}
}
})
# nao_ptw[nao_ptw$cluster %in% make_the_table(make_the_graph(res,0.11,s_ptw="04139_Mitophagy_-_yeast"))$name,]
#%>% filter(taxonomic.scope == input$s_tax)
output$Observe_Out<-renderTable({
info_filt() %>%
filter(Pathaway == input$s_p) %>%
select(-c("Pathaway"))
},
options = list(rowCallback = I(
'function(row, data) {
if (data[4] == "Fungi")
$("td", row).css("background", "orange");
else if (data[2] == "Fungi" )
$("td", row).css("background", "blue");
else if (data[3] == "Fungi" )
$("td", row).css("background", "green");
}'
))
)
brushed_grp <- reactive({
if (is.null(input$plot_brush$xmin)){
uni_grp
} else {unique(coords_filt$name)}
})
output$text <- renderText({ case_number() })
}
#%%%%%%%%%%%%%%%%%%%%
shinyApp(ui, server)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ui <- dashboardPage(
dashboardHeader(title = "Fungal Garden Interactome",titleWidth = 350),
dashboardSidebar(
h1("__________",align = "center"),
h4(strong("Network Graph"),align = "center"),
h6("--> Step 1. Select one Pathway to learn about its pattern concentration"),
h6("--> Step 2. You can also adjust the complexity of the network by changing the Importance Score"),
selectInput("s_ptw","Select a Pathway:",uni_ptw),
sliderInput("obs", "Importance Score:",min = 0, max = 0.2, value = 0.13),
h1(" ",align = "center"),
h1(" ",align = "center"),
h1("__________",align = "center"),
h4(strong("Data Table"),align = "center"),
h6("--> Step 3. Filter out certain Taxonomic Scope from the detailed dataframe of your previously brushed groups"),
#selectInput("s_t","Select a Taxonomic Scope:",uni_t,selected = as.factor(uni_t[1:2]),multiple = TRUE),
selectInput("s_tax","Select a Taxonomic Scope:",uni_t,selected = NULL,multiple = TRUE)
),
dashboardBody(
tags$style(HTML('
/* logo */
.skin-blue .main-header .logo {
background-color: #6D6564;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #B0D0C9;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #504C4B;
}
/* main sidebar */
.skin-blue .main-sidebar {
background-color: #B7B2B2;
}
/* active selected tab in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
background-color: #696868;
}
/* other links in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu a{
background-color: #9D9D9D;
color: #000000;
}
/* other links in the sidebarmenu when hovered */
.skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
background-color: #B0D0C9;
}
/* toggle button when hovered  */
.skin-blue .main-header .navbar .sidebar-toggle:hover{
background-color: #86B898;
}
/* changes the colour of the slider */
.js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {
background: #62AB89;
border-top: 1px solid #978B8B ;
border-bottom: 1px solid #978B8B ;
}
/* body */
.content-wrapper, .right-side {
background-color: #F5F4F4;
}
')),
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot", brush = brushOpts("plot_brush"), height = 300), width = 20),
box(plotOutput("plot2"), height = 460, width = 7),
box(textOutput("text"),
selectInput("s_p","Filter by Pathway:",uni_ptw,selected = as.factor(uni_ptw[1])),
tableOutput('Observe_Out'),
width = 5)
)
)
)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
server <- function(input, output,session) {
P1 <- reactive({make_the_graph(res,input$obs,input$s_ptw)})
output$plot <- renderPlot({P1()})
group_names_selected <- reactive({
if (is.null(input$plot_brush$xmin)){
"Group_40"
} else {coords_filt()[,1]}
})
case_number <- reactive({
length(input$s_tax)
})
output$plot2 <- renderPlot({ make_line_plot2(dfgroup_long,centers_long,group_names_selected(),input$s_tax,case_number()) })
coords_filt <- reactive({
if (is.null(input$plot_brush$xmin)){
make_the_table(P1())[,-c(1,2)]
} else {
filter(make_the_table(P1()),
x >= input$plot_brush$xmin,
x <= input$plot_brush$xmax,
y >= input$plot_brush$ymin,
y <= input$plot_brush$ymax)[,-c(1,2)]
}
})
#here
observe({
updateSelectInput(session,"s_p",choices=unique(info_filt()[,5]),selected=unique(info_filt()[,5])[1])
})
#browser()
info_filt <-  reactive({
if (is.null((input$plot_brush$xmin))){
nao_ptw[nao_ptw$cluster %in% coords_filt()[,1] ,][1:10,]
} else {
if (is.null(input$s_tax)){
nao_ptw[nao_ptw$cluster %in% coords_filt()[,1] ,] }
else{
nao_ptw[nao_ptw$cluster %in% coords_filt()[,1] ,] %>% filter(taxonomic.scope == input$s_tax)
}
}
})
# nao_ptw[nao_ptw$cluster %in% make_the_table(make_the_graph(res,0.11,s_ptw="04139_Mitophagy_-_yeast"))$name,]
#%>% filter(taxonomic.scope == input$s_tax)
output$Observe_Out<-renderTable({
info_filt() %>%
filter(Pathaway == input$s_p) %>%
select(-c("Pathaway"))
},
options = list(rowCallback = I(
'function(row, data) {
if (data[4] == "Fungi")
$("td", row).css("background", "orange");
else if (data[2] == "Fungi" )
$("td", row).css("background", "blue");
else if (data[3] == "Fungi" )
$("td", row).css("background", "green");
}'
))
)
brushed_grp <- reactive({
if (is.null(input$plot_brush$xmin)){
uni_grp
} else {unique(coords_filt$name)}
})
output$text <- renderText({ case_number() })
}
#%%%%%%%%%%%%%%%%%%%%
shinyApp(ui, server)
library(devtools)
install_github("GenomicSEM/GenomicSEM")
library("GenomicSEM")
library(data.table)
#create vector of the summary statistics files
files<- "Insomnia.txt.gz"
#define the reference file being used to allign alleles across summary stats
#here we are using hapmap3
hm3<-"w_hm3.snplist"
#name the traits
trait.names<-"Insomnia"
#list the sample sizes. All but PTSD have SNP-specific sum of effective sample sizes so only its
#sample size is listed here
N= 12663596
#definte the imputation quality filter
info.filter=0.9
#define the MAF filter
maf.filter=0.01
#run munge
munge(files=files,hm3=hm3,trait.names=trait.names,N=N,info.filter=info.filter,maf.filter=maf.filter)
#To run using DWLS estimation#
CommonFactor_DWLS<- commonfactor(covstruc = LDSCoutput, estimation="DWLS")
#create vector of the summary statistics files
files<- "Insomnia_edit.txt"
#define the reference file being used to allign alleles across summary stats
#here we are using hapmap3
hm3<-"w_hm3.snplist"
#name the traits
trait.names<-"Insomnia"
#list the sample sizes. All but PTSD have SNP-specific sum of effective sample sizes so only its
#sample size is listed here
N= 12663596
#definte the imputation quality filter
info.filter=0.9
#define the MAF filter
maf.filter=0.01
#run munge
munge(files=files,hm3=hm3,trait.names=trait.names,N=N,info.filter=info.filter,maf.filter=maf.filter)
#create vector of the summary statistics files
files<- "Insomnia_edit.txt"
#define the reference file being used to allign alleles across summary stats
#here we are using hapmap3
hm3<-"w_hm3.snplist"
#name the traits
trait.names<-"Insomnia"
#list the sample sizes. All but PTSD have SNP-specific sum of effective sample sizes so only its
#sample size is listed here
N= 12663596
#definte the imputation quality filter
info.filter=0.9
#define the MAF filter
maf.filter=0.01
#run munge
munge(files=files,hm3=hm3,trait.names=trait.names,N=N,info.filter=info.filter,maf.filter=maf.filter)
#create vector of the summary statistics files
files<- "Insomnia_edit.txt"
#define the reference file being used to allign alleles across summary stats
#here we are using hapmap3
hm3<-"w_hm3.snplist"
#name the traits
trait.names<-"Insomnia"
#list the sample sizes. All but PTSD have SNP-specific sum of effective sample sizes so only its
#sample size is listed here
N= 12663596
#definte the imputation quality filter
info.filter=0.9
#define the MAF filter
maf.filter=0.01
#run munge
munge(files=files,hm3=hm3,trait.names=trait.names,N=N,info.filter=info.filter,maf.filter=maf.filter)
#create vector of the summary statistics files
files<- "Insomnia_edit.txt"
#define the reference file being used to allign alleles across summary stats
#here we are using hapmap3
hm3<-"w_hm3.snplist"
#name the traits
trait.names<-"Insomnia"
#list the sample sizes. All but PTSD have SNP-specific sum of effective sample sizes so only its
#sample size is listed here
N= 12663596
#definte the imputation quality filter
info.filter=0.9
#define the MAF filter
maf.filter=0.01
#run munge
munge(files=files,hm3=hm3,trait.names=trait.names,N=N,info.filter=info.filter,maf.filter=maf.filter)
#create vector of the summary statistics files
files<- "Daytime_Napping.txt"
#define the reference file being used to allign alleles across summary stats
#here we are using hapmap3
hm3<-"w_hm3.snplist"
#name the traits
trait.names<-"Daytime_Napping"
#list the sample sizes. All but PTSD have SNP-specific sum of effective sample sizes so only its
#sample size is listed here
N= 13304132
#definte the imputation quality filter
info.filter=0.9
#define the MAF filter
maf.filter=0.01
#run munge
munge(files=files,hm3=hm3,trait.names=trait.names,N=N,info.filter=info.filter,maf.filter=maf.filter)
#create vector of the summary statistics files
files<- c("Cannabis_Dependence.txt","Daytime_Napping.txt","Insomnia.txt","Leisure_Computer_Use.txt")
#define the reference file being used to allign alleles across summary stats
#here we are using hapmap3
hm3<-"w_hm3.snplist"
#name the traits
trait.names<-c("Cannabis_Dependence","Daytime_Napping","Insomnia","Leisure_Computer_Use")
#list the sample sizes. All but PTSD have SNP-specific sum of effective sample sizes so only its
#sample size is listed here
N= c(8957569,13304132,12663596,19400417)
#definte the imputation quality filter
info.filter=0.9
#define the MAF filter
maf.filter=0.01
#run munge
munge(files=files,hm3=hm3,trait.names=trait.names,N=N,info.filter=info.filter,maf.filter=maf.filter)
#vector of munged summary statisitcs
traits<-c("HANDNESS.sumstats.gz","Schizophrenia.sumstats.gz","Daytime_Napping.sumstats.gz","Insomnia.sumstats.gz")
#enter sample prevalence of .5 to reflect that all traits were munged using the sum of effective sample size
sample.prev<- c(.5,.5,.5,.5)
#vector of population prevalences
population.prev<- c(.15,.32,.25,.1)
#the folder of LD scores
ld<-"eur_w_ld_chr/"
#the folder of LD weights [typically the same as folder of LD scores]
wld<-"eur_w_ld_chr/"
#name the traits
trait.names<- c("HANDNESS","Schizophrenia","Daytime_Napping","Insomnia")
#run LDSC
LDSCoutput<-ldsc(traits=traits,sample.prev=sample.prev,population.prev=population.prev,ld=ld,wld=wld,trait.names=trait.names)
#optional command to save the output as a .RData file for later use
save(LDSCoutput,file="LDSCoutput.RData")
LDSCoutput$S
heatmap(LDSCoutput$S)
library(reshape2)
cormat <- LDSCoutput$S
melted_cormat <- melt(cormat)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=-value)) +
geom_tile()
heatmap(LDSCoutput$S)
corrplot(cormat)
library(corrplot)
corrplot(cormat)
corrplot(cormat,method = 'color')
corrplot(LDSCoutput$S,method = 'color')
heatmap(LDSCoutput$S)
heatmap(t(LDSCoutput$S))
heatmap(t(LDSCoutput$V))
par(mfrow=c(1,2))
heatmap(t(LDSCoutput$S))
heatmap(t(LDSCoutput$V))
par(mfrow=c(1,2))
heatmap(t(LDSCoutput$S))
heatmap(t(LDSCoutput$V))
par(mfrow=c(2,2))
heatmap(t(LDSCoutput$S))
heatmap(t(LDSCoutput$V))
#To run using DWLS estimation#
CommonFactor_DWLS<- commonfactor(covstruc = LDSCoutput, estimation="DWLS")
#print CommonFactor_DWLs output#
CommonFactor_DWLS
install.packages("semPlot")
library(semPlot)
semPaths(CommonFactor_DWLS)
heatmap(t(LDSCoutput$I))
par(mfrow=c(2,2))
heatmap(t(LDSCoutput$S))
heatmap(t(LDSCoutput$I))
LDSCoutput$I
heatmap(t(LDSCoutput$I))
LDSCoutput$I
heatmap(t(log(LDSCoutput$I)))
par(mfrow=c(2,2))
LDSCoutput$I
log(LDSCoutput$I)
LDSCoutput$I
LDSCoutput$I*10
heatmap(t(LDSCoutput$I*10))
LDSCoutput$I*10
LDSCoutput$I
View(centers_long)
library(MolPad)
library(dplyr)
data(fungal_test)
head(fungal_test)
load("/Users/hazelma/Documents/GitHub/fungal_garden_interactome/pkg/data/fungal_test.RData")
fungal_test
load("/Users/hazelma/Documents/GitHub/MolPad/data/fungal_garden.RData")
View(fungal_dlist)
load("/Users/hazelma/Documents/GitHub/MolPad/data/fungal_garden.RData")
fungal_dlist
fungal_dlist[[1]]
for (i in 1:3) {
for (j in 2:ncol(fungal_dlist[[i]])) {
fungal_dlist[[i]][,j] = fungal_dlist[[i]][,j] + rnorm(1)
}
}
fungal_dlist[[1]]
for (i in 1:3) {
for (j in 2:ncol(fungal_dlist[[i]])) {
fungal_dlist[[i]][,j] = fungal_dlist[[i]][,j] + rnorm(1)
}
}
fungal_dlist[[1]]
load("/Users/hazelma/Documents/GitHub/MolPad/data/fungal_garden.RData")
fungal_dlist[[1]]
for (i in 1:3) {
for (j in 2:ncol(fungal_dlist[[i]])) {
for (k in 1:nrow(fungal_dlist[[i]]))) {
for (i in 1:3) {
for (j in 2:ncol(fungal_dlist[[i]])) {
for (k in 1:nrow(fungal_dlist[[i]])){
fungal_dlist[[i]][k,j] = fungal_dlist[[i]][k,j] + rnorm(1)
}
}
}
load("/Users/hazelma/Documents/GitHub/MolPad/data/fungal_garden.RData")
fungal_dlist[[1]]
for (i in 1:3) {
for (j in 2:ncol(fungal_dlist[[i]])) {
fungal_dlist[[i]][,j] = fungal_dlist[[i]][,j] + rnorm(1)
}
}
fungal_dlist[[1]]
for (i in 1:3) {
for (j in 1:nrow(fungal_dlist[[i]])) {
fungal_dlist[[i]][j,] = fungal_dlist[[i]][j,] + rnorm(1,0,0.5)
}
}
fungal_dlist[[1]][1,1]
fungal_dlist[[1]][2,1]
fungal_dlist[[1]]
for (i in 1:3) {
for (j in 2:nrow(fungal_dlist[[i]])) {
fungal_dlist[[i]][j,2:ncol(fungal_dlist[[i]])] = fungal_dlist[[i]][j,2:ncol(fungal_dlist[[i]])] + rnorm(1,0,0.5)
}
}
fungal_dlist[[1]]
ncol(fungal_dlist[[1]])
fungal_dlist[[1]][1,]
fungal_dlist[[1]]
for (i in 1:3) {
for (j in 1:nrow(fungal_dlist[[i]])) {
fungal_dlist[[i]][j,2:12] = fungal_dlist[[i]][j,2:12] + rnorm(1,0,0.5)
}
}
fungal_dlist[[1]][1,2:12]
fungal_dlist[[1]][1,2:12]+1
load("/Users/hazelma/Documents/GitHub/MolPad/data/fungal_garden.RData")
for (i in 1:3) {
for (j in 2:ncol(fungal_dlist[[i]])) {
fungal_dlist[[i]][,j] = fungal_dlist[[i]][,j] + rnorm(1)
}
}
for (i in 1:3) {
for (k in 1:nrow(fungal_dlist[[i]])) {
fungal_dlist[[i]][k,2:12] = fungal_dlist[[i]][k,2:12] + rnorm(1)
}
}
load("/Users/hazelma/Documents/GitHub/MolPad/data/fungal_garden.RData")
for (i in 1:3) {
for (j in 2:ncol(fungal_dlist[[i]])) {
fungal_dlist[[i]][,j] = fungal_dlist[[i]][,j] + rnorm(1)
}
}
for (i in 1:3) {
for (k in 1:nrow(fungal_dlist[[i]])) {
fungal_dlist[[i]][k,2:12] = fungal_dlist[[i]][k,2:12] + rnorm(1)
print(i+","+k)
}
}
for (i in 1:3) {
for (k in 1:nrow(fungal_dlist[[i]])) {
fungal_dlist[[i]][k,2:12] = fungal_dlist[[i]][k,2:12] + rnorm(1)
print(paste(i,"_",k))
}
}
load("/Users/hazelma/Documents/GitHub/MolPad/data/fungal_garden.RData")
for (i in 1:3) {
for (j in 2:ncol(fungal_dlist[[i]])) {
fungal_dlist[[i]][,j] = fungal_dlist[[i]][,j] + rnorm(1)
}
}
fungal_dlist[[1]]
View(pathway)
save(fungal_dlist, pathway, file="Multiomics_simulate.RData")
save(fungal_dlist, pathway, file="multiomics_simulate.RData")
pre_process(fungal_dlist, typenameList = c('Peptides','Lipids','Metabolites'), replaceNA = TRUE,
scale = TRUE, autoColName = "Section_")
data <- pre_process(fungal_dlist, typenameList = c('Peptides','Lipids','Metabolites'), replaceNA = TRUE,
scale = TRUE, autoColName = "Section_")
pathway
fungal_dlist
names(fungal_dlist)
fungal_dlist
data <- pre_process(fungal_dlist, typenameList = c('DataSource_A','DataSource_B','DataSource_C'), replaceNA = TRUE,
scale = TRUE, autoColName = "Section_")
head(data)
setwd("/Users/hazelma/Documents/GitHub")
document("MolPad") #important: generate man
#-----------------------update package----------------------
library(devtools)
setwd("/Users/hazelma/Documents/GitHub")
document("MolPad") #important: generate man
devtools::test()
setwd("/Users/hazelma/Documents/GitHub/MolPad")
devtools::check()
data <- pre_process(fungal_dlist, typenameList = c('DataSource_A','DataSource_B','DataSource_C'), replaceNA = TRUE,
scale = TRUE, autoColName = "Section_")
data <- pre_process(fungal_dlist, typenameList = c('DataSource_A','DataSource_B','DataSource_C'), replaceNA = TRUE,
scale = TRUE, autoColName = "Section_")
head(data)
data("cheese")
pre_process(cheese)
pre_process(cheese,typenameList = NULL, replaceNA = TRUE,
scale = TRUE, autoColName = "Sec_")
View(cheese)
library(MolPad)
library(dplyr)
cheesedata <- cheese |>
select(ID, A_1:C_5, phylum) |>
rename(type=phylum) |>
pre_process()
View(cheesedata)
data <- pre_process(fungal_dlist, typenameList = c('DataSource_A','DataSource_B','DataSource_C'), replaceNA = TRUE,
scale = TRUE, autoColName = "Section_")
head(data)
# Simulated data with the standard input format
x <- data.frame("ID"=1:5,"Day_1"=rnorm(5),"Day_2"=rnorm(5),"Day_3"=rnorm(5),"Day_4"=rnorm(5),"Day_5"=rnorm(5),"Day_6"=rnorm(5),"Day_7"=rnorm(5),"Day_8"=rnorm(5),"type"=c(rep("peptide",3),"lipid","metabolite"))
x
