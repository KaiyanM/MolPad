#-------- process data--------
nao_ptw <- ptw_process(ptw)
#create("pkg")
document("pkg") #important: generate man
`rm(list = c("ptw_process"))`
library(devtools)
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
load("./pkg/data/stuff.RData")
#' @export
uni_t <- unique(dfgroup_long$taxonomic.scope)
#create("pkg")
document("pkg") #important: generate man
install("pkg")
#' @export
uni_grp <- unique(res$from)
#-------- process data--------
nao_ptw <- ptw_process(ptw)
library(dplyr)
ptw_process <- function(ptw,ko_term){
nao_ptw <- na.omit(ptw) %>%
mutate(ko_term = paste0('https://www.kegg.jp/entry/',ko_term)) %>%
mutate(ko_term = paste0("<a href='", ko_term,"' target='_blank'>", ko_term,"</a>"))
return(nao_ptw)
}
#-------- process data--------
nao_ptw <- ptw_process(ptw)
library(devtools)
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
#create("pkg")
document("pkg") #important: generate man
#ranger
#pkgedown
#-----------------------run package----------------------
#-------- load data--------
data(stuff)
#-------- process data--------
nao_ptw <- ptw_process(ptw,ko_term)
make_the_table(p)
runExample()
p <- make_the_graph(res,0.05,"03050_Proteasome_")
make_the_table(p)
make_stackbar_plot(dfgroup_long,c('Group_33','Group_3'),c('Bacteria',"Metazoa","Burkholderia"))
make_line_plot(dfgroup_long,c('Group_33','Group_3'),c('Bacteria',"Metazoa","Burkholderia"))
p <- make_the_graph(res,0.05,"03050_Proteasome_")
make_the_graph(res,0.05,"03050_Proteasome_")
uniquedata(dfgroup_long,nao_ptw,res)
#create("pkg")
document("pkg") #important: generate man
#create("pkg")
document("pkg") #important: generate man
system.file("shiny-examples", "myapp", package = "pkg")
#create("pkg")
document("pkg") #important: generate man
#create("pkg")
document("pkg") #important: generate man
install("pkg")
#ranger
#pkgedown
#-----------------------run package----------------------
#-------- load data--------
data(stuff)
## view first six lines
head(dfgroup_long)
#-------- process data--------
nao_ptw <- ptw_process(ptw,ko_term)
runExample()
#-------- view dashboard --------
dashboardtitle <- "My Title 01"
runExample()
return(ui)}
}
#create("pkg")
document("pkg") #important: generate man
#create("pkg")
document("pkg") #important: generate man
#create("pkg")
document("pkg") #important: generate man
#create("pkg")
document("pkg") #important: generate man
library(devtools)
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
install("pkg")
library("pkg")
#ranger
#pkgedown
#-----------------------run package----------------------
#-------- load data--------
data(stuff)
#-------- process data--------
nao_ptw <- ptw_process(ptw,ko_term)
p <- make_the_graph(res,0.05,"03050_Proteasome_")
#-------- view dashboard --------
dashboardtitle <- "My Title 01"
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
install("pkg")
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
library(devtools)
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
install("pkg")
library("pkg")
#ranger
#pkgedown
runExample()
#create("pkg")
document("pkg") #important: generate man
install("pkg")
runExample()
#-------- view dashboard --------
dashboardtitle <- "My Title 01"
runExample()
#ranger
#pkgedown
#-----------------------run package----------------------
#-------- load data--------
data(stuff)
#-------- process data--------
nao_ptw <- ptw_process(ptw,ko_term)
runExample()
library(devtools)
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
install("pkg")
library("pkg")
#ranger
#pkgedown
#-----------------------run package----------------------
#-------- load data--------
data(stuff)
#-------- process data--------
nao_ptw <- ptw_process(ptw,ko_term)
assignvalue(dfgroup_long,nao_ptw,res,"This is a title")
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
#create("pkg")
document("pkg") #important: generate man
pkgdown::build_site()
setwd("~/Desktop/pkg")
pkgdown::build_site()
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
setwd("~/Desktop/pkg")
pkgdown::build_site()
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
setwd("~/Desktop/pkg")
pkgdown::build_site()
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
setwd("~/Desktop/pkg")
pkgdown::build_site()
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
setwd("~/Desktop/pkg")
pkgdown::build_site()
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
setwd("~/Desktop/pkg")
pkgdown::build_site()
#create("pkg")
document("pkg") #important: generate man
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
runExample()
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
runExample()
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
runExample()
setwd("~/Desktop/pkg")
pkgdown::build_site()
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
setwd("~/Desktop/pkg")
pkgdown::build_site()
runExample()
runExample()
setwd("~/Desktop/pkg")
pkgdown::build_site()
setwd("~/Desktop/pkg")
pkgdown::build_site()
setwd("~/Desktop/pkg")
pkgdown::build_site()
runExample()
runExample()
View(dfgroup_long)
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
#create("pkg")
document("pkg") #important: generate man
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
runExample()
#create("pkg")
document("pkg") #important: generate man
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
runExample()
cheese1 <- read.csv("/Users/hazelma/Desktop/Cheese_deseq_norm.csv")
head(cheese1)
View(cheese1)
load("./pkg/data/stuff.RData")
View(cheese1)
View(dfgroup_long)
View(dfgroup_long)
View(cheese1)
View(dfgroup_long)
View(cheese1)
library(tidyverse)
setwd("~/Documents/GitHub/fungal_garden_interactome/Untitled/Cheese_data/cheese_data_vingette/")
d_1<-read.csv('We2_eggnog.emapper_1.csv', header=TRUE)
d_2<-read.csv('We3_eggnog.emapper_1.csv', header=TRUE)
View(d_1)
cheese1 <- read.csv("/Users/hazelma/Desktop/Cheese_deseq_norm.csv")
head(cheese1)
View(cheese1)
View(d_1)
d_3<-read.csv('We4_eggnog.emapper_1.csv', header=TRUE)
d_4<-read.csv('We5_eggnog.emapper_1.csv', header=TRUE)
d_5<-read.csv('We6_eggnog.emapper_1.csv', header=TRUE)
View(d_3)
df <- rbind(d_1,d_2,d_3)
df <- rbind(d_1,d_2,d_3,d_4,d_5)
df
save(df, file = "./cheesedf.RData")
load("./cheesedf.RData")
df
knitr::opts_chunk$set(echo = TRUE)
P <- read.csv("./Knn_impute/pep_d_imputed.csv",header = TRUE)
M <- read.csv("./Knn_impute/met_d_imputed.csv",header = TRUE)
L <- read.csv("./Knn_impute/lip_d_imputed.csv",header = TRUE)
P <- P[,-1]
M <- M[,-1]
L <- L[,-1]
dfgroup <- rbind(dlist[[1]], dlist[[2]], dlist[[3]])
transpose_dataframe__ <- function(data){
data <- data.frame(t(data))
names(data) <- data[1,]
data <- data[-1,]
data <- as.data.frame(sapply(data,as.numeric))
return(data)
}
scale_by_row__ <- function(data){
# first column is Name
d <- as.data.frame(t(apply(data[,-1], 1, scale)))
d <- cbind(data[,1],d)
colnames(d) <- colnames(data)
return(d)
}
# transform NA to 0
# column: genes
# row: samples
# class: dbl
data_trans <- function(datalist,replaceNA = TRUE,transpose = rep(1,length(data))){
for (i in 1:length(datalist)) {
#
colnames(datalist[[i]]) <- c("ID",paste0("Day_",1:11))
#replace na
datalist[[i]][is.na(datalist[[i]])] <- 0
#scale
datalist[[i]] <- scale_by_row__(datalist[[i]])
#2
if(transpose[i] == 1){
datalist[[i]] = transpose_dataframe__(datalist[[i]])
}
}
return(datalist)
}
dlist <- data_trans(fungal,transpose = c(0,0,0))
fungal <- list(P,M,L)
dlist <- data_trans(fungal,transpose = c(0,0,0))
dlist
dfgroup <- rbind(dlist[[1]], dlist[[2]], dlist[[3]])
dfgroup$ID <- as.factor(dfgroup$ID)
View(dfgroup)
View(fungal)
fungal
P
load("./cheesedf.RData")
load("./cheesedf.RData")
load("./cheesedf.RData")
mcluster <- function(df,time_idx,value_idx){
dfclean <- df[,c(time_idx,value_idx)]
return(dfclean)
}
View(df)
mcluster(df,1,5)
View(df)
mcluster <- function(df,time_idx,id_idx,value_idx){
dfclean <- df[,c(time_idx,id_idx,value_idx)]
return(dfclean)
}
mcluster(df,1,2,5)
library(dplyr)
View(df)
mcluster <- function(df,time,id,value){
dfclean <- df[,c(time,id,value)] %>% spread(id, value)
return(dfclean)
}
mcluster(df,"Time","ID","score")
View(df)
dfgroup_long <- read.csv("/Users/hazelma/Documents/GitHub/fungal_garden_interactome/trend/dfgroup_long.csv")
ptw <- read.csv("/Users/hazelma/Documents/GitHub/fungal_garden_interactome/trend/ptw_shiny_input.csv")
View(dfgroup_long)
View(ptw)
View(ptw)
cheese1 <- read.csv("/Users/hazelma/Desktop/Cheese_deseq_norm.csv")
View(cheese1)
View(df)
View(df)
View(cheese1)
View(df)
View(cheese1)
library(devtools)
setwd("~/Desktop")
#create("pkg")
document("pkg") #important: generate man
library("pkg")
#ranger
#pkgedown
#-----------------------run package----------------------
#-------- load data--------
data(stuff)
View(dfgroup_long)
#-------- process data--------
nao_ptw <- ptw_process(ptw,ko_term)
View(nao_ptw)
assignvalue(dfgroup_long,nao_ptw,res,"This is a title")
runExample()
load("./cheesedf.RData")
View(df)
head(df)
cheese <- read.csv("Cheese_quant_norm.csv")
head(cheese)
cheese
cheese
mcluster <- function(df,time,id,value){
dfclean <- df[,c(time,id,value)] %>% spread(id, value)
return(dfclean)
}
#ranger
#pkgedown
#-----------------------run package----------------------
#-------- load data--------
data(stuff)
View(dfgroup_long)
View(cheese)
View(cheese)
colnames(cheese)
head(cheese)
View(dfgroup_long)
Cheese_data <- readRDS(paste0(getwd(),"/Cheeseupdate/Cheese_data.rds"))
getwd()
dirname(getwd())
# Cheese
#Cheese_data_quant_norm <- readRDS(paste0(dirname(getwd()),"/Cheeseupdate/Cheese_data_quant_norm.rds"))
Cheese_data <- readRDS(paste0(dirname(getwd()),"/Cheeseupdate/Cheese_data.rds"))
Functions_annoations <- readRDS(paste0(dirname(getwd()),"/Cheeseupdate/Functions_annoations.rds"))
Taxonomy_annoations <- readRDS(paste0(dirname(getwd()),"/Cheeseupdate/Taxonomy_annoations.rds"))
#-----------------------update package----------------------
library(devtools)
dirname(getwd())
chee <- merge(Cheese_data,Taxonomy_annoations[,c("ID","phylum")],by="ID")
colnames(chee)[7] <- 'type'
chee$type[is.na(chee$type)] <- "Other"
head(chee,10)
chee[,1:6] <- scale_by_row__(chee[,1:6])
library("pkg")
chee[,1:6] <- scale_by_row__(chee[,1:6])
#if the number does not change, then remove the feature
a <- na.omit(chee)
View(a)
rm(a)
#if the number does not change, then remove the feature
chee <- na.omit(chee)
cluschee <- gClusters(chee,ncluster = 10,elbow.max=15)
View(chee)
cluschee[[1]]$centers
#-------- load data--------
Cheese_data_quant_norm <- readRDS(paste0(dirname(getwd()),"/Cheeseupdate/Cheese_data_quant_norm.rds"))
View(Cheese_data)
View(Cheese_data_quant_norm)
View(Cheese_data)
